// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	database_enums "github.com/RouteHub-Link/routehub-service-graphql/database/enums"
	database_models "github.com/RouteHub-Link/routehub-service-graphql/database/models"
	database_types "github.com/RouteHub-Link/routehub-service-graphql/database/types"
	"github.com/google/uuid"
)

type AccountPhoneInput struct {
	Number      string `json:"number"`
	CountryCode string `json:"countryCode"`
}

type AnalyticReport struct {
	Link         *database_models.Link   `json:"link"`
	Domain       *database_models.Domain `json:"domain"`
	TotalHits    int                     `json:"totalHits"`
	TotalSuccess int                     `json:"totalSuccess"`
	TotalFailed  int                     `json:"totalFailed"`
	Referers     []*MetricAnalytics      `json:"referers"`
	Locations    []*MetricAnalytics      `json:"locations"`
	Useragents   []*MetricAnalytics      `json:"useragents"`
}

type AnalyticReports struct {
	TodayObservations     []*ObservationAnalytic `json:"todayObservations"`
	YesterdayObservations []*ObservationAnalytic `json:"yesterdayObservations"`
	LastWeekObservations  string                 `json:"lastWeekObservations"`
	LastMonthObservations string                 `json:"lastMonthObservations"`
	LastYearObservations  string                 `json:"lastYearObservations"`
	AllTimeObservations   string                 `json:"allTimeObservations"`
}

type ClientInformationInput struct {
	Useragent string `json:"useragent"`
	IP        string `json:"ip"`
}

type CrawlRequestInput struct {
	LinkID uuid.UUID `json:"linkId"`
}

type DomainCreateInput struct {
	OrganizationID    uuid.UUID               `json:"organizationId"`
	Name              string                  `json:"name"`
	URL               string                  `json:"url"`
	ClientInformation *ClientInformationInput `json:"clientInformation"`
}

type DomainVerification struct {
	ID        uuid.UUID                `json:"id"`
	Domain    *database_models.Domain  `json:"domain"`
	Status    database_enums.DNSStatus `json:"status"`
	Logs      []*database_types.Log    `json:"logs"`
	CreatedAt time.Time                `json:"createdAt"`
	UpdatedAt *time.Time               `json:"updatedAt,omitempty"`
	DeletedAt *time.Time               `json:"deletedAt,omitempty"`
}

type LinkCreateInput struct {
	Target             string                             `json:"target"`
	Path               *string                            `json:"path,omitempty"`
	PlatformID         uuid.UUID                          `json:"platformId"`
	RedirectionOptions *database_enums.RedirectionOptions `json:"redirectionOptions,omitempty"`
	OpenGraph          *database_types.OpenGraph          `json:"openGraph"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginPayload struct {
	Token        string `json:"token"`
	RefreshToken string `json:"refreshToken"`
}

type MetricAnalytics struct {
	Feeder       string    `json:"feeder"`
	TotalHits    int       `json:"totalHits"`
	TotalSuccess int       `json:"totalSuccess"`
	TotalFailed  int       `json:"totalFailed"`
	StartAt      time.Time `json:"startAt"`
	EndAt        time.Time `json:"endAt"`
}

type ObservationAnalytic struct {
	ID                uuid.UUID                         `json:"id"`
	Link              *database_models.Link             `json:"link"`
	Domain            *database_models.Domain           `json:"domain"`
	Platform          *database_models.Platform         `json:"platform"`
	Useragent         string                            `json:"useragent"`
	IP                string                            `json:"ip"`
	Referrer          string                            `json:"referrer"`
	Location          string                            `json:"location"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	Success           bool                              `json:"success"`
	CreatedAt         time.Time                         `json:"createdAt"`
	UpdatedAt         *time.Time                        `json:"updatedAt,omitempty"`
}

type ObservationInput struct {
	LinkID            uuid.UUID                         `json:"linkId"`
	DomainID          uuid.UUID                         `json:"domainId"`
	PlatformID        uuid.UUID                         `json:"platformId"`
	Useragent         string                            `json:"useragent"`
	IP                string                            `json:"ip"`
	Referrer          string                            `json:"referrer"`
	Location          string                            `json:"location"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	Success           bool                              `json:"success"`
}

type OrganizationInput struct {
	Name         string              `json:"name"`
	Website      string              `json:"website"`
	Description  string              `json:"description"`
	Location     string              `json:"location"`
	SocialMedias []*SocialMediaInput `json:"socialMedias"`
}

type PasswordReset struct {
	ID        uuid.UUID             `json:"id"`
	User      *database_models.User `json:"user"`
	Token     string                `json:"token"`
	CreatedAt time.Time             `json:"createdAt"`
	ExpiresAt time.Time             `json:"expiresAt"`
	UpdatedAt *time.Time            `json:"updatedAt,omitempty"`
	DeletedAt *time.Time            `json:"deletedAt,omitempty"`
}

type PasswordResetCreateInput struct {
	Email             string                  `json:"email"`
	ClientInformation *ClientInformationInput `json:"clientInformation"`
}

type PasswordResetUpdateInput struct {
	Token             string                  `json:"token"`
	Password          string                  `json:"password"`
	ConfirmPassword   string                  `json:"confirmPassword"`
	ClientInformation *ClientInformationInput `json:"clientInformation"`
}

type Payment struct {
	ID           uuid.UUID                     `json:"id"`
	User         *database_models.User         `json:"user"`
	Organization *database_models.Organization `json:"organization"`
	Amount       float64                       `json:"amount"`
	Date         string                        `json:"date"`
	Status       PaymentStatus                 `json:"status"`
}

type Permission struct {
	ID            uuid.UUID                       `json:"id"`
	Name          string                          `json:"name"`
	Description   string                          `json:"description"`
	Organizations []*database_models.Organization `json:"organizations"`
	Domains       []*database_models.Domain       `json:"domains"`
	Platforms     []*database_models.Platform     `json:"platforms"`
}

type PlatformDeployment struct {
	ID        uuid.UUID                 `json:"id"`
	Platform  *database_models.Platform `json:"platform"`
	Domain    *database_models.Domain   `json:"domain"`
	Status    DeploymentStatus          `json:"status"`
	Logs      []*database_types.Log     `json:"logs"`
	CreatedAt time.Time                 `json:"createdAt"`
	UpdatedAt *time.Time                `json:"updatedAt,omitempty"`
	DeletedAt *time.Time                `json:"deletedAt,omitempty"`
}

type RefreshTokenInput struct {
	NewToken        string `json:"newToken"`
	NewRefreshToken string `json:"newRefreshToken"`
}

type SocialMediaInput struct {
	Name string `json:"name"`
	URL  string `json:"url"`
	Icon string `json:"icon"`
}

type Template struct {
	ID                uuid.UUID                         `json:"id"`
	Name              string                            `json:"name"`
	Platform          *database_models.Platform         `json:"platform"`
	OpenGraph         *database_types.OpenGraph         `json:"openGraph"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	State             database_enums.StatusState        `json:"state"`
	CreatedBy         *database_models.User             `json:"createdBy"`
	EditedBy          *database_models.User             `json:"editedBy"`
	CreatedAt         time.Time                         `json:"createdAt"`
	UpdatedAt         *time.Time                        `json:"updatedAt,omitempty"`
	DeletedAt         *time.Time                        `json:"deletedAt,omitempty"`
}

type TemplateInput struct {
	Name              string                            `json:"name"`
	OpenGraph         *database_types.OpenGraph         `json:"openGraph"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	State             database_enums.StatusState        `json:"state"`
}

type Ticket struct {
	ID           uuid.UUID                     `json:"id"`
	User         *database_models.User         `json:"user"`
	Organization *database_models.Organization `json:"organization"`
	Title        string                        `json:"title"`
	Category     string                        `json:"category"`
	Description  string                        `json:"description"`
	Messages     []*TicketMessage              `json:"messages"`
	Attachments  []string                      `json:"attachments,omitempty"`
	Status       database_enums.TicketStatus   `json:"status"`
	CreatedAt    time.Time                     `json:"createdAt"`
	UpdatedAt    *time.Time                    `json:"updatedAt,omitempty"`
	DeletedAt    *time.Time                    `json:"deletedAt,omitempty"`
}

type TicketInput struct {
	Title       string   `json:"title"`
	Category    string   `json:"category"`
	Description string   `json:"description"`
	Attachments []string `json:"attachments,omitempty"`
}

type TicketMessage struct {
	ID        uuid.UUID                   `json:"id"`
	Ticket    *Ticket                     `json:"ticket"`
	Sender    database_enums.TicketSender `json:"sender"`
	User      *database_models.User       `json:"user"`
	Content   string                      `json:"content"`
	CreatedAt time.Time                   `json:"createdAt"`
	UpdatedAt *time.Time                  `json:"updatedAt,omitempty"`
	DeletedAt *time.Time                  `json:"deletedAt,omitempty"`
}

type TicketMessageInput struct {
	Content string `json:"content"`
}

type UpdateUserInviteInput struct {
	Code   string                          `json:"code"`
	Status database_enums.InvitationStatus `json:"status"`
	User   *UserInput                      `json:"user"`
}

type UserInput struct {
	Email             string                  `json:"email"`
	Password          string                  `json:"password"`
	ConfirmPassword   string                  `json:"confirmPassword"`
	Fullname          string                  `json:"fullname"`
	Phone             *AccountPhoneInput      `json:"phone"`
	ClientInformation *ClientInformationInput `json:"clientInformation"`
}

type UserUpdatePasswordInput struct {
	Password          string                  `json:"password"`
	ConfirmPassword   string                  `json:"confirmPassword"`
	ClientInformation *ClientInformationInput `json:"clientInformation"`
}

type DeploymentStatus string

const (
	DeploymentStatusWorking DeploymentStatus = "WORKING"
	DeploymentStatusFailed  DeploymentStatus = "FAILED"
	DeploymentStatusSuccess DeploymentStatus = "SUCCESS"
)

var AllDeploymentStatus = []DeploymentStatus{
	DeploymentStatusWorking,
	DeploymentStatusFailed,
	DeploymentStatusSuccess,
}

func (e DeploymentStatus) IsValid() bool {
	switch e {
	case DeploymentStatusWorking, DeploymentStatusFailed, DeploymentStatusSuccess:
		return true
	}
	return false
}

func (e DeploymentStatus) String() string {
	return string(e)
}

func (e *DeploymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentStatus", str)
	}
	return nil
}

func (e DeploymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentPlan string

const (
	PaymentPlanFree    PaymentPlan = "FREE"
	PaymentPlanMonthly PaymentPlan = "MONTHLY"
)

var AllPaymentPlan = []PaymentPlan{
	PaymentPlanFree,
	PaymentPlanMonthly,
}

func (e PaymentPlan) IsValid() bool {
	switch e {
	case PaymentPlanFree, PaymentPlanMonthly:
		return true
	}
	return false
}

func (e PaymentPlan) String() string {
	return string(e)
}

func (e *PaymentPlan) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentPlan(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentPlan", str)
	}
	return nil
}

func (e PaymentPlan) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusPending PaymentStatus = "PENDING"
	PaymentStatusSuccess PaymentStatus = "SUCCESS"
	PaymentStatusFailed  PaymentStatus = "FAILED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusPending,
	PaymentStatusSuccess,
	PaymentStatusFailed,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusPending, PaymentStatusSuccess, PaymentStatusFailed:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
