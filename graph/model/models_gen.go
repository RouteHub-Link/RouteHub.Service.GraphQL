// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	database_enums "github.com/RouteHub-Link/routehub-service-graphql/database/enums"
	database_models "github.com/RouteHub-Link/routehub-service-graphql/database/models"
	"github.com/google/uuid"
)

type CompanyInput struct {
	Name         string              `json:"name"`
	Website      string              `json:"website"`
	Description  string              `json:"description"`
	Location     string              `json:"location"`
	SocialMedias []*SocialMediaInput `json:"socialMedias"`
}

type Domain struct {
	ID                    uuid.UUID                `json:"id"`
	Name                  string                   `json:"name"`
	URL                   string                   `json:"url"`
	Company               *database_models.Company `json:"company"`
	Platform              *Platform                `json:"platform,omitempty"`
	DNSStatus             database_enums.DNSStatus `json:"dnsStatus"`
	State                 StatusState              `json:"state"`
	Links                 []*Link                  `json:"links,omitempty"`
	Analytics             *DomainAnalytics         `json:"analytics"`
	LastDNSVerificationAt *time.Time               `json:"lastDNSVerificationAt,omitempty"`
	CreatedAt             time.Time                `json:"createdAt"`
	UpdatedAt             *time.Time               `json:"updatedAt,omitempty"`
	DeletedAt             *time.Time               `json:"deletedAt,omitempty"`
}

type DomainAnalytics struct {
	ID             uuid.UUID              `json:"id"`
	TotalLinks     int                    `json:"totalLinks"`
	TotalPlatforms int                    `json:"totalPlatforms"`
	TotalUsers     int                    `json:"totalUsers"`
	Observations   []*ObservationAnalytic `json:"observations"`
}

type DomainInput struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

type Link struct {
	ID                 uuid.UUID                         `json:"id"`
	URL                string                            `json:"url"`
	Key                string                            `json:"key"`
	Creator            *database_models.User             `json:"creator"`
	Platform           *Platform                         `json:"platform"`
	Domain             *Domain                           `json:"domain"`
	Analytics          *LinkAnalytics                    `json:"analytics"`
	OpenGraph          []*OpenGraph                      `json:"openGraph,omitempty"`
	RedirectionOptions database_enums.RedirectionOptions `json:"redirectionOptions"`
	State              StatusState                       `json:"state"`
	CreatedAt          time.Time                         `json:"createdAt"`
	UpdatedAt          *time.Time                        `json:"updatedAt,omitempty"`
	DeletedAt          *time.Time                        `json:"deletedAt,omitempty"`
}

type LinkAnalytics struct {
	ID                        uuid.UUID                         `json:"id"`
	Useragent                 string                            `json:"useragent"`
	PlatformRedirectionChoice database_enums.RedirectionOptions `json:"platformRedirectionChoice"`
	IP                        string                            `json:"ip"`
	Location                  string                            `json:"location"`
	Referrer                  string                            `json:"referrer"`
	Observations              []*ObservationAnalytic            `json:"observations"`
}

type LinkInput struct {
	URL                string                            `json:"url"`
	Key                string                            `json:"key"`
	RedirectionOptions database_enums.RedirectionOptions `json:"redirectionOptions"`
	OpenGraph          *OpenGraphInput                   `json:"openGraph"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type ObservationAnalytic struct {
	ID                uuid.UUID                         `json:"id"`
	Link              *Link                             `json:"link"`
	Domain            *Domain                           `json:"domain"`
	Platform          *Platform                         `json:"platform"`
	Useragent         string                            `json:"useragent"`
	IP                string                            `json:"ip"`
	Referrer          string                            `json:"referrer"`
	Location          string                            `json:"location"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	Success           bool                              `json:"success"`
	CreatedAt         time.Time                         `json:"createdAt"`
	UpdatedAt         *time.Time                        `json:"updatedAt,omitempty"`
}

type ObservationInput struct {
	LinkID            uuid.UUID                         `json:"linkId"`
	DomainID          uuid.UUID                         `json:"domainId"`
	PlatformID        uuid.UUID                         `json:"platformId"`
	Useragent         string                            `json:"useragent"`
	IP                string                            `json:"ip"`
	Referrer          string                            `json:"referrer"`
	Location          string                            `json:"location"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	Success           bool                              `json:"success"`
}

type OpenGraph struct {
	Title          *string     `json:"title,omitempty"`
	Description    *string     `json:"description,omitempty"`
	FavIcon        *string     `json:"favIcon,omitempty"`
	Image          *string     `json:"image,omitempty"`
	AlternateImage *string     `json:"alternateImage,omitempty"`
	URL            *string     `json:"url,omitempty"`
	SiteName       *string     `json:"siteName,omitempty"`
	Type           *string     `json:"type,omitempty"`
	Locale         *string     `json:"locale,omitempty"`
	X              *OpenGraphX `json:"x,omitempty"`
}

type OpenGraphInput struct {
	Title          string           `json:"title"`
	Description    string           `json:"description"`
	FavIcon        string           `json:"favIcon"`
	Image          string           `json:"image"`
	AlternateImage string           `json:"alternateImage"`
	URL            string           `json:"url"`
	SiteName       string           `json:"siteName"`
	Type           string           `json:"type"`
	Locale         string           `json:"locale"`
	X              *OpenGraphXInput `json:"x"`
}

type OpenGraphX struct {
	Card        *string `json:"card,omitempty"`
	Site        *string `json:"site,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Image       *string `json:"image,omitempty"`
	URL         *string `json:"url,omitempty"`
	Type        *string `json:"type,omitempty"`
	Creator     *string `json:"creator,omitempty"`
}

type OpenGraphXInput struct {
	Card        string `json:"card"`
	Site        string `json:"site"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Image       string `json:"image"`
	URL         string `json:"url"`
	Type        string `json:"type"`
	Creator     string `json:"creator"`
}

type PasswordReset struct {
	ID        uuid.UUID             `json:"id"`
	User      *database_models.User `json:"user"`
	Token     string                `json:"token"`
	CreatedAt time.Time             `json:"createdAt"`
	ExpiresAt time.Time             `json:"expiresAt"`
	UpdatedAt *time.Time            `json:"updatedAt,omitempty"`
	DeletedAt *time.Time            `json:"deletedAt,omitempty"`
}

type PasswordResetCreateInput struct {
	Email     string `json:"email"`
	Useragent string `json:"useragent"`
	IP        string `json:"ip"`
}

type PasswordResetUpdateInput struct {
	Token           string `json:"token"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
	Useragent       string `json:"useragent"`
	IP              string `json:"ip"`
}

type Payment struct {
	ID      uuid.UUID                `json:"id"`
	User    *database_models.User    `json:"user"`
	Company *database_models.Company `json:"company"`
	Amount  float64                  `json:"amount"`
	Date    string                   `json:"date"`
	Status  PaymentStatus            `json:"status"`
}

type Permission struct {
	ID          uuid.UUID                  `json:"id"`
	Name        string                     `json:"name"`
	Description string                     `json:"description"`
	Companies   []*database_models.Company `json:"companies"`
	Domains     []*Domain                  `json:"domains"`
	Platforms   []*Platform                `json:"platforms"`
	Users       []*database_models.User    `json:"users"`
	Links       []*Link                    `json:"links"`
}

type Platform struct {
	ID                uuid.UUID                         `json:"id"`
	Name              string                            `json:"name"`
	OpenGraph         *OpenGraph                        `json:"openGraph"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	Company           *database_models.Company          `json:"company"`
	Domains           []*Domain                         `json:"domains"`
	Permissions       []*Permission                     `json:"permissions"`
	Links             []*Link                           `json:"links"`
	Analytics         *PlatformAnalytics                `json:"analytics"`
	Status            StatusState                       `json:"status"`
	Templates         []*Template                       `json:"templates"`
	PinnedLinks       []*Link                           `json:"pinnedLinks"`
}

type PlatformAnalytics struct {
	ID           uuid.UUID              `json:"id"`
	TotalLinks   int                    `json:"totalLinks"`
	TotalUsers   int                    `json:"totalUsers"`
	Observations []*ObservationAnalytic `json:"observations"`
}

type PlatformInput struct {
	Name              string                            `json:"name"`
	OpenGraph         *OpenGraphInput                   `json:"openGraph"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	State             StatusState                       `json:"state"`
	Templates         []*TemplateInput                  `json:"templates"`
}

type PlatformPinInput struct {
	LinkID uuid.UUID `json:"linkId"`
}

type RefreshTokenInput struct {
	NewToken        string `json:"newToken"`
	NewRefreshToken string `json:"newRefreshToken"`
}

type SocialMediaInput struct {
	Name string `json:"name"`
	URL  string `json:"url"`
	Icon string `json:"icon"`
}

type Template struct {
	ID                uuid.UUID                         `json:"id"`
	Name              string                            `json:"name"`
	Platform          *Platform                         `json:"platform"`
	OpenGraph         *OpenGraph                        `json:"openGraph"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	State             StatusState                       `json:"state"`
	CreatedBy         *database_models.User             `json:"createdBy"`
	EditedBy          *database_models.User             `json:"editedBy"`
	CreatedAt         time.Time                         `json:"createdAt"`
	UpdatedAt         *time.Time                        `json:"updatedAt,omitempty"`
	DeletedAt         *time.Time                        `json:"deletedAt,omitempty"`
}

type TemplateInput struct {
	Name              string                            `json:"name"`
	OpenGraph         *OpenGraphInput                   `json:"openGraph"`
	RedirectionChoice database_enums.RedirectionOptions `json:"redirectionChoice"`
	State             StatusState                       `json:"state"`
}

type Ticket struct {
	ID          uuid.UUID                   `json:"id"`
	User        *database_models.User       `json:"user"`
	Company     *database_models.Company    `json:"company"`
	Title       string                      `json:"title"`
	Category    string                      `json:"category"`
	Description string                      `json:"description"`
	Messages    []*TicketMessage            `json:"messages"`
	Attachments []string                    `json:"attachments,omitempty"`
	Status      database_enums.TicketStatus `json:"status"`
	CreatedAt   time.Time                   `json:"createdAt"`
	UpdatedAt   *time.Time                  `json:"updatedAt,omitempty"`
	DeletedAt   *time.Time                  `json:"deletedAt,omitempty"`
}

type TicketInput struct {
	Title       string   `json:"title"`
	Category    string   `json:"category"`
	Description string   `json:"description"`
	Attachments []string `json:"attachments,omitempty"`
}

type TicketMessage struct {
	ID        uuid.UUID                   `json:"id"`
	Ticket    *Ticket                     `json:"ticket"`
	Sender    database_enums.TicketSender `json:"sender"`
	User      *database_models.User       `json:"user"`
	Content   string                      `json:"content"`
	CreatedAt time.Time                   `json:"createdAt"`
	UpdatedAt *time.Time                  `json:"updatedAt,omitempty"`
	DeletedAt *time.Time                  `json:"deletedAt,omitempty"`
}

type TicketMessageInput struct {
	Content string `json:"content"`
}

type UserInput struct {
	Email           string `json:"email"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
	Fullname        string `json:"fullname"`
	Phone           string `json:"phone"`
	CountryCode     string `json:"countryCode"`
	Useragent       string `json:"useragent"`
	IP              string `json:"ip"`
}

type UserUpdatePasswordInput struct {
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
	Useragent       string `json:"useragent"`
	IP              string `json:"ip"`
}

type PaymentPlan string

const (
	PaymentPlanFree    PaymentPlan = "FREE"
	PaymentPlanMonthly PaymentPlan = "MONTHLY"
)

var AllPaymentPlan = []PaymentPlan{
	PaymentPlanFree,
	PaymentPlanMonthly,
}

func (e PaymentPlan) IsValid() bool {
	switch e {
	case PaymentPlanFree, PaymentPlanMonthly:
		return true
	}
	return false
}

func (e PaymentPlan) String() string {
	return string(e)
}

func (e *PaymentPlan) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentPlan(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentPlan", str)
	}
	return nil
}

func (e PaymentPlan) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusPending PaymentStatus = "PENDING"
	PaymentStatusSuccess PaymentStatus = "SUCCESS"
	PaymentStatusFailed  PaymentStatus = "FAILED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusPending,
	PaymentStatusSuccess,
	PaymentStatusFailed,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusPending, PaymentStatusSuccess, PaymentStatusFailed:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StatusState string

const (
	StatusStatePasive StatusState = "PASIVE"
	StatusStateActive StatusState = "ACTIVE"
)

var AllStatusState = []StatusState{
	StatusStatePasive,
	StatusStateActive,
}

func (e StatusState) IsValid() bool {
	switch e {
	case StatusStatePasive, StatusStateActive:
		return true
	}
	return false
}

func (e StatusState) String() string {
	return string(e)
}

func (e *StatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusState", str)
	}
	return nil
}

func (e StatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
