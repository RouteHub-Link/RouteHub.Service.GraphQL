scalar UUID
scalar DateTime
scalar JSON

enum DNSStatus {
  PENDING
  VERIFIED
  FAILED
}

enum DeploymentStatus {
  WORKING
  FAILED
  SUCCESS
}

enum StatusState {
  PASIVE
  ACTIVE
}

enum TicketStatus {
  OPEN
  CLOSED
}

enum TicketSender {
  USER
  Admin
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum RedirectionOptions {
  TIMED
  NOT_AUTO_REDIRECT
  DIRECT_HTTP_REDIRECT
  CONFIRM_REDIRECT
}

enum PaymentPlan {
  FREE
  MONTHLY
}

enum PlatformPermission {
  LINK_CREATE
  LINK_UPDATE
  LINK_DELETE
  PLATFORM_CREATE
  PLATFORM_UPDATE
  PLATFORM_DELETE
}

enum OrganizationPermission {
  DOMAIN_CREATE
  DOMAIN_UPDATE
  DOMAIN_DELETE
  Organization_UPDATE
  Organization_DELETE
  PLATFORM_CREATE
  PLATFORM_UPDATE
  PLATFORM_DELETE
  USER_INVITE
  PLATFORM_USER_ADD
  PLATFORM_USER_REMOVE
  PLATFORM_USER_UPDATE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CrawlStatus {
  REQUESTED
  STARTED
  SUCCESS
  FAILED
}

directive @auth on FIELD_DEFINITION
directive @platformPermission(permission: PlatformPermission!) on INPUT_OBJECT
directive @organizationPermission(permission: OrganizationPermission!) on INPUT_OBJECT
directive @platformDuplicateCheck on FIELD_DEFINITION
directive @domainDuplicateCheck on FIELD_DEFINITION
directive @linkDuplicateCheck on FIELD_DEFINITION

type Query {
  me: User! @auth
  users: [User!]!
  organizations: [Organization!]!
  platforms: [Platform!]!
  refreshToken(input: RefreshTokenInput!): String!
}

type User {
  id: UUID!
  avatar: String!
  email: String!
  fullname: String!
  verified: Boolean!
  phone: AccountPhone!
  organizations: [Organization!]!
  platforms: [Platform!]!
  permissions: [Permission!]!
  payments: [Payment!]!
  userInvites: [UserInvite!]!

  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserInvite {
  id: UUID!
  email: String!
  code: String!
  organization: Organization!
  platforms: [Platform!]!
  user: User!
  status: InvitationStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

input UserInviteInput {
  email: String!
  organizationsPermissions: [OrganizationsWithPermissionsInput!]!
  platformsWithPermissions: [PlatformsWithPermissionsInput!]!
}

input UpdateUserInviteInput {
  code: String!
  status: InvitationStatus!
  user: UserInput!
}

input OrganizationsWithPermissionsInput {
  organizationId: UUID!
  permissions: [OrganizationPermission!]!
}

input PlatformsWithPermissionsInput {
  platformId: UUID!
  permissions: [PlatformPermission!]!
}

type PasswordReset {
  id: UUID!
  user: User!
  token: String!
  createdAt: DateTime!
  expiresAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

input AccountPhoneInput {
  number: String!
  countryCode: String!
}

type AccountPhone {
  number: String!
  countryCode: String!
  verified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Organization {
  id: UUID!
  name: String!
  website: String!
  permissions: [OrganizationPermission!]!
  platforms: [Platform!]!
  industry: [Industry!]
  description: String!
  location: String!
  socialMedias: [SocialMedia!]!
  users: [User!]!
  domains: [Domain!]!
  paymentPlan: PaymentPlan!
  payments: [Payment!]!
}

type SocialMedia {
  name: String!
  url: String!
  icon: String!
}

type Industry {
  name: String!
  organizations: [Organization!]!
}

type Domain {
  id: UUID!
  name: String!
  url: String!
  organization: Organization!
  platform: Platform
  verification: [DomainVerification]!
  state: StatusState!
  analytics: [MetricAnalytics!]!
  analyticReports: AnalyticReports!
  lastDNSVerificationAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

input DomainCreateInput {
  organizationId: UUID!
  name: String!
  url: String!
  clientInformation: ClientInformationInput!
}

type Platform {
  id: UUID!
  name: String!
  openGraph: OpenGraph!
  redirectionChoice: RedirectionOptions!
  organization: Organization!
  domain: Domain!
  permissions: [PlatformPermission!]!
  deployments: [PlatformDeployment!]!
  links: [Link!]!
  analytics: [AnalyticReport]!
  analyticReports: AnalyticReports!
  status: StatusState!
  templates: [Template!]!
  pinnedLinks: [Link!]!
}

input PlatformCreateInput @organizationPermission(permission: PLATFORM_CREATE) {
  organizationId: UUID!
  domainId: UUID!
  name: String!
  openGraph: OpenGraphInput!
  redirectionChoice: RedirectionOptions!
  templates: [TemplateInput]
}


type PlatformDeployment {
  id: UUID!
  platform: Platform!
  domain: Domain!
  status: DeploymentStatus!
  logs: [Log!]!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type Log{
  id: UUID!
  createdAt: DateTime!
  message: String!
}

type DomainVerification {
  id: UUID!
  domain: Domain!
  status: DNSStatus!
  logs: [Log!]!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type Template {
  id: UUID!
  name: String!
  platform: Platform!
  openGraph: OpenGraph!
  redirectionChoice: RedirectionOptions!
  state: StatusState!
  createdBy: User!
  editedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type OpenGraph {
  title: String
  description: String
  favIcon: String
  image: String
  alternateImage: String
  url: String
  siteName: String
  type: String
  locale: String
  x: OpenGraphX
}

type OpenGraphX {
  card: String
  site: String
  title: String
  description: String
  image: String
  url: String
  type: String
  creator: String
} 

type Permission {
  id: UUID!
  name: String!
  description: String!
  organizations: [Organization!]!
  domains: [Domain!]!
  platforms: [Platform!]!
}

type Link {
  id: UUID!
  target: String!
  path: String!
  creator: User!
  platform: Platform!
  domain: Domain!
  analytics: [MetricAnalytics!]!
  openGraph: [OpenGraph!]
  redirectionOptions: RedirectionOptions!
  state: StatusState!
  crawls: [LinkCrawl!]!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type LinkCrawl {
  id: UUID!
  target: String!
  link: Link!
  crawlStatus: CrawlStatus!
  logs: [Log!]!
  result: OpenGraph
  crawledBy: User!
  createdAt: DateTime!
  startAt: DateTime
  endAt: DateTime
  updatedAt: DateTime
}

input CrawlRequestInput @platformPermission(permission: LINK_UPDATE) {
  linkId: UUID!
}


input LinkCreateInput @platformPermission(permission: LINK_CREATE) {
  target: String!
  path: String
  platformId: UUID!
  redirectionOptions: RedirectionOptions
  openGraph: OpenGraphInput!
}

type Ticket {
  id: UUID!
  user: User!
  organization: Organization!
  title: String!
  category: String!
  description: String!
  messages: [TicketMessage!]!
  attachments: [String!]
  status: TicketStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type LoginPayload {
  token: String!
  refreshToken: String!
}

type TicketMessage {
  id: UUID!
  ticket: Ticket!
  sender: TicketSender!
  user: User!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

input TicketMessageInput {
  content: String!
}

type Payment {
  id: UUID!
  user: User!
  organization: Organization!
  amount: Float!
  date: String!
  status: PaymentStatus!
  # ... Add other payment-related fields
}


type AnalyticReports {
  todayObservations: [ObservationAnalytic!]!
  yesterdayObservations: [ObservationAnalytic!]!
  lastWeekObservations: String!
  lastMonthObservations: String!
  lastYearObservations: String!
  allTimeObservations: String!
}

type AnalyticReport {
  link: Link!
  domain: Domain!
  totalHits: Int!
  totalSuccess: Int!
  totalFailed: Int!
  referers: [MetricAnalytics!]!
  locations: [MetricAnalytics!]!
  useragents: [MetricAnalytics!]!
}

type MetricAnalytics {
  feeder: JSON!
  totalHits: Int!
  totalSuccess: Int!
  totalFailed: Int!
  startAt: DateTime!
  endAt: DateTime!
}

type ObservationAnalytic {
  id: UUID!
  link: Link!
  domain: Domain!
  platform: Platform!
  useragent: String!
  ip: String!
  referrer: String!
  location: String!
  redirectionChoice: RedirectionOptions!
  success: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

input TicketInput {
  title: String!
  category: String!
  description: String!
  attachments: [String!]
}

input ObservationInput {
  linkId: UUID!
  domainId: UUID!
  platformId: UUID!
  useragent: String!
  ip: String!
  referrer: String!
  location: String!
  redirectionChoice: RedirectionOptions!
  success: Boolean!
}

input LoginInput {
  email: String!
  password: String!
}

input RefreshTokenInput{
  newToken: String!
  newRefreshToken: String!
}

input UserInput {
  email: String!
  password: String!
  confirmPassword: String!
  fullname: String!
  phone: AccountPhoneInput!
  clientInformation: ClientInformationInput!
}

input UserUpdatePasswordInput {
  password: String!
  confirmPassword: String!
  clientInformation: ClientInformationInput!
}

input PasswordResetCreateInput {
  email: String!
  clientInformation: ClientInformationInput!
}

input PasswordResetUpdateInput {
  token: String!
  password: String!
  confirmPassword: String!
  clientInformation: ClientInformationInput!
}


input ClientInformationInput {
  useragent: String!
  ip: String!
}

input TemplateInput {
  name: String!
  openGraph: OpenGraphInput!
  redirectionChoice: RedirectionOptions!
  state: StatusState!
}

input OpenGraphInput {
  title: String!
  description: String!
  favIcon: String!
  image: String!
  alternateImage: String!
  url: String!
  siteName: String!
  type: String!
  locale: String!
  x: OpenGraphXInput!
}

input OpenGraphXInput {
  card: String!
  site: String!
  title: String!
  description: String!
  image: String!
  url: String!
  type: String!
  creator: String!
}

input OrganizationInput {
  name: String!
  website: String!
  description: String!
  location: String!
  socialMedias: [SocialMediaInput!]!
}

input SocialMediaInput {
  name: String!
  url: String!
  icon: String!
}


type Mutation {
  createUser(input: UserInput!): User!
  loginUser(input: LoginInput!): LoginPayload!
  inviteUser(input: UserInviteInput!): UserInvite! @auth
  updateUserInvitation(input: UpdateUserInviteInput!): InvitationStatus!
  updateUserPassword(userId: ID!, input: UserUpdatePasswordInput!): User!
  requestPasswordReset(input: PasswordResetCreateInput!): PasswordReset!
  resetPassword(input: PasswordResetUpdateInput!): User!

  createDomain(input: DomainCreateInput!): Domain! @domainDuplicateCheck
  createPlatform(input: PlatformCreateInput!): Platform! @platformDuplicateCheck
  createLink(input: LinkCreateInput!): Link! @linkDuplicateCheck
  requestCrawl(input: CrawlRequestInput!): LinkCrawl!
}