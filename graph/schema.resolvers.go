package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"time"

	"github.com/RouteHub-Link/routehub-service-graphql/auth"
	database_enums "github.com/RouteHub-Link/routehub-service-graphql/database/enums"
	database "github.com/RouteHub-Link/routehub-service-graphql/database/models"
	database_relations "github.com/RouteHub-Link/routehub-service-graphql/database/relations"
	database_types "github.com/RouteHub-Link/routehub-service-graphql/database/types"
	"github.com/RouteHub-Link/routehub-service-graphql/graph/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreatedAt is the resolver for the createdAt field.
func (r *accountPhoneResolver) CreatedAt(ctx context.Context, obj *database_types.AccountPhone) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *accountPhoneResolver) UpdatedAt(ctx context.Context, obj *database_types.AccountPhone) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Organizations is the resolver for the Organizations field.
func (r *industryResolver) Organizations(ctx context.Context, obj *database_types.Industry) ([]*database.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - Organizations"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*database.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, input model.LoginInput) (*model.LoginPayload, error) {
	user, err := r.UserService.Login(input.Email, input.Password)
	if err != nil {
		return nil, err
	}

	userSession := new(auth.UserSession)
	userSession.ID = user.ID
	userSession.Name = user.Fullname

	token, err := auth.GenerateToken(userSession.ToClaims())

	if err != nil {
		return nil, err
	}

	return &model.LoginPayload{
		Token: token,
	}, nil
}

// InviteUser is the resolver for the inviteUser field.
func (r *mutationResolver) InviteUser(ctx context.Context, input model.UserInviteInput) (*database_relations.UserInvite, error) {
	userSession := auth.ForContext(ctx)

	organizationWithPermissions := []database_relations.OrganizationsWithPermissions{}
	for _, organization := range input.OrganizationsPermissions {
		organizationWithPermissions = append(organizationWithPermissions, database_relations.OrganizationsWithPermissions{
			OrganizationID:          organization.OrganizationID,
			OrganizationPermissions: organization.OrganizationPermissions,
		})
	}

	platformWithPermissions := []database_relations.PlatformsWithPermissions{}
	for _, platform := range input.PlatformsWithPermissions {
		platformWithPermissions = append(platformWithPermissions, database_relations.PlatformsWithPermissions{
			PlatformID:          platform.PlatformID,
			PlatformPermissions: platform.PlatformPermissions,
		})
	}

	invite, err := r.UserService.InviteUser(
		input.Email,
		userSession.ID,
		organizationWithPermissions,
		platformWithPermissions)

	return invite, err
}

// UpdateUserInvitation is the resolver for the updateUserInvitation field.
func (r *mutationResolver) UpdateUserInvitation(ctx context.Context, input model.UpdateUserInviteInput) (database_enums.InvitationStatus, error) {
	panic(fmt.Errorf("not implemented: UpdateUserInvitation - updateUserInvitation"))
}

// UpdateUserPassword is the resolver for the updateUserPassword field.
func (r *mutationResolver) UpdateUserPassword(ctx context.Context, userID string, input model.UserUpdatePasswordInput) (*database.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUserPassword - updateUserPassword"))
}

// RequestPasswordReset is the resolver for the requestPasswordReset field.
func (r *mutationResolver) RequestPasswordReset(ctx context.Context, input model.PasswordResetCreateInput) (*model.PasswordReset, error) {
	panic(fmt.Errorf("not implemented: RequestPasswordReset - requestPasswordReset"))
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input model.PasswordResetUpdateInput) (*database.User, error) {
	panic(fmt.Errorf("not implemented: ResetPassword - resetPassword"))
}

// Permissions is the resolver for the permissions field.
func (r *organizationResolver) Permissions(ctx context.Context, obj *database.Organization) ([]database_enums.OrganizationPermission, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// Platforms is the resolver for the platforms field.
func (r *organizationResolver) Platforms(ctx context.Context, obj *database.Organization) ([]*model.Platform, error) {
	panic(fmt.Errorf("not implemented: Platforms - platforms"))
}

// Users is the resolver for the users field.
func (r *organizationResolver) Users(ctx context.Context, obj *database.Organization) ([]*database.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Domains is the resolver for the domains field.
func (r *organizationResolver) Domains(ctx context.Context, obj *database.Organization) ([]*model.Domain, error) {
	panic(fmt.Errorf("not implemented: Domains - domains"))
}

// PaymentPlan is the resolver for the paymentPlan field.
func (r *organizationResolver) PaymentPlan(ctx context.Context, obj *database.Organization) (model.PaymentPlan, error) {
	panic(fmt.Errorf("not implemented: PaymentPlan - paymentPlan"))
}

// Payments is the resolver for the payments field.
func (r *organizationResolver) Payments(ctx context.Context, obj *database.Organization) ([]*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payments - payments"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*database.User, error) {
	userSession := auth.ForContext(ctx)
	if userSession == nil {
		return nil, gqlerror.Errorf("Access Denied")
	}

	return r.UserService.User(userSession.ID)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*database.User, error) {
	return r.UserService.Users()
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*database.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - organizations"))
}

// Platforms is the resolver for the platforms field.
func (r *queryResolver) Platforms(ctx context.Context) ([]*model.Platform, error) {
	panic(fmt.Errorf("not implemented: Platforms - platforms"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *queryResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Organizations is the resolver for the Organizations field.
func (r *userResolver) Organizations(ctx context.Context, obj *database.User) ([]*database.Organization, error) {
	return r.UserService.UserOrganization(obj.ID)
}

// Platforms is the resolver for the platforms field.
func (r *userResolver) Platforms(ctx context.Context, obj *database.User) ([]*model.Platform, error) {
	panic(fmt.Errorf("not implemented: Platforms - platforms"))
}

// Permissions is the resolver for the permissions field.
func (r *userResolver) Permissions(ctx context.Context, obj *database.User) ([]*model.Permission, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// Payments is the resolver for the payments field.
func (r *userResolver) Payments(ctx context.Context, obj *database.User) ([]*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payments - payments"))
}

// UserInvites is the resolver for the userInvites field.
func (r *userResolver) UserInvites(ctx context.Context, obj *database.User) ([]*database_relations.UserInvite, error) {
	panic(fmt.Errorf("not implemented: UserInvites - userInvites"))
}

// Organization is the resolver for the organization field.
func (r *userInviteResolver) Organization(ctx context.Context, obj *database_relations.UserInvite) (*database.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}

// Platforms is the resolver for the platforms field.
func (r *userInviteResolver) Platforms(ctx context.Context, obj *database_relations.UserInvite) ([]*model.Platform, error) {
	panic(fmt.Errorf("not implemented: Platforms - platforms"))
}

// User is the resolver for the user field.
func (r *userInviteResolver) User(ctx context.Context, obj *database_relations.UserInvite) (*database.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *userInviteResolver) DeletedAt(ctx context.Context, obj *database_relations.UserInvite) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// Permissions is the resolver for the permissions field.
func (r *organizationsWithPermissionsInputResolver) Permissions(ctx context.Context, obj *database_relations.OrganizationsWithPermissions, data []database_enums.OrganizationPermission) error {
	// TODO check the organizations i guess user has permisison or just remove this
	return nil
}

// Permissions is the resolver for the permissions field.
func (r *platformsWithPermissionsInputResolver) Permissions(ctx context.Context, obj *database_relations.PlatformsWithPermissions, data []database_enums.PlatformPermission) error {
	// TODO check the platform i guess user has permisison or just remove this
	return nil
}

// AccountPhone returns AccountPhoneResolver implementation.
func (r *Resolver) AccountPhone() AccountPhoneResolver { return &accountPhoneResolver{r} }

// Industry returns IndustryResolver implementation.
func (r *Resolver) Industry() IndustryResolver { return &industryResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Organization returns OrganizationResolver implementation.
func (r *Resolver) Organization() OrganizationResolver { return &organizationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// UserInvite returns UserInviteResolver implementation.
func (r *Resolver) UserInvite() UserInviteResolver { return &userInviteResolver{r} }

// OrganizationsWithPermissionsInput returns OrganizationsWithPermissionsInputResolver implementation.
func (r *Resolver) OrganizationsWithPermissionsInput() OrganizationsWithPermissionsInputResolver {
	return &organizationsWithPermissionsInputResolver{r}
}

// PlatformsWithPermissionsInput returns PlatformsWithPermissionsInputResolver implementation.
func (r *Resolver) PlatformsWithPermissionsInput() PlatformsWithPermissionsInputResolver {
	return &platformsWithPermissionsInputResolver{r}
}

type accountPhoneResolver struct{ *Resolver }
type industryResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type organizationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userInviteResolver struct{ *Resolver }
type organizationsWithPermissionsInputResolver struct{ *Resolver }
type platformsWithPermissionsInputResolver struct{ *Resolver }
