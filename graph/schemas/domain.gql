type Domain {
  id: UUID!
  name: String!
  url: String!
  organization: Organization!
  platform: Platform
  "Link validation history."
  verifications: [DNSVerification!]
  "Last validation of the link."
  lastVerification: DNSVerification
  state: StatusState!
  analytics: [MetricAnalytics!]!
  analyticReports: AnalyticReports!
  lastDNSVerificationAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

input DomainCreateInput @domainURLCheck {
  organizationId: UUID!
  name: String!
  url: String!
  clientInformation: ClientInformationInput!
}

type DNSVerification {
    isValid: Boolean!
    secret: String
    message: String
    error: String
    createdAt: DateTime!
    lastCheckedAt: DateTime
    updatedAt: DateTime
    nextProcessAt: DateTime
    completedAt: DateTime
    createdBy: User!
}

extend type Mutation {
  "This mutation is used for creating a domain for an organization. *(Plan is After an domain is created and verified it can be used to create a platform & deployment process.)"
  createDomain(input: DomainCreateInput!): Domain! @auth
  "This mutation is used for verifying a domain. *(Plan is After an domain is created and verified it can be used to create a platform & deployment process.)" 
  newDomainVerification(domainId: UUID!, forced: Boolean): DNSVerification! @auth
}