type Domain {
  id: UUID!
  name: String!
  url: String!
  organization: Organization!
  platform: Platform
  verification: [DomainVerification]!
  state: StatusState!
  analytics: [MetricAnalytics!]!
  analyticReports: AnalyticReports!
  lastDNSVerificationAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

input DomainCreateInput @domainURLCheck {
  organizationId: UUID!
  name: String!
  url: String!
  clientInformation: ClientInformationInput!
}

type DomainVerification {
  id: UUID!
  domain: Domain!
  status: DNSStatus!
  logs: [Log!]!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

extend type Mutation {
  "This mutation is used for creating a domain for an organization. *(Plan is After an domain is created and verified it can be used to create a platform & deployment process.)"
  createDomain(input: DomainCreateInput!): Domain! @auth
}