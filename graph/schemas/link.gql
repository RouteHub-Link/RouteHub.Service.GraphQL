"A shortened link."
type Link {
    id: UUID!
    "The link's target. This is the link that will be redirected to."
    target: String!
    "This is the shortened link's path. like XYZ123, could be setted by user or generated by system."
    path: String!
    "The link's creator."
    creator: User!
    "The link's related platform."
    platform: Platform!
    "The link's related domain. This is the domain that link will be redirected to. Domain.URL/%link.path"
    domain: Domain!
    "Analytics of the link this should be retrived by another analytics provider."
    analytics: [MetricAnalytics!]!
    "This is the link OG Options also has some SEO fields. This could be crwaled by the system or customized by user."
    openGraph: [OpenGraph!]
    "This is the redirection choice of the link. This could be gethered by platform default or user."
    redirectionOptions: RedirectionOptions!
    "Links state."
    state: StatusState!
    "Link validation history."
    validations: [LinkValidation!]
    "Last validation of the link."
    lastValidation: LinkValidation
    "Crawling history of the link."
    crawls: [LinkCrawl!]!
    createdAt: DateTime!
    updatedAt: DateTime
    deletedAt: DateTime
}

type LinkEdge {
    cursor: String!
    node: Link!
}

type LinkConnection {
    edges: [LinkEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

input LinkFilter {
    platform: UUIDFilter
    domain: UUIDFilter
}

type LinkCrawl {
    id: UUID!
    target: String!
    link: Link!
    crawlStatus: CrawlStatus!
    logs: [Log!]!
    result: OpenGraph
    crawledBy: User!
    createdAt: DateTime!
    startAt: DateTime
    endAt: DateTime
    updatedAt: DateTime
}

type LinkValidation {
    isValid: Boolean!
    message: String
    error: String
    createdAt: DateTime!
    lastCheckedAt: DateTime
    updatedAt: DateTime
    nextProcessAt: DateTime
    completedAt: DateTime
    createdBy: User!
}

"If a user wants to crawl a link, must has LINK_UPDATE permission for that platform."
input CrawlRequestInput @platformPermission(permission: LINK_UPDATE) {
    linkId: UUID!
}

"If a user wants to create a link, must has LINK_CREATE permission for that platform."
input LinkCreateInput @platformPermission(permission: LINK_CREATE) {
    target: String!
    path: String
    platformId: UUID!
    redirectionOptions: RedirectionOptions
    openGraph: OpenGraphInput
}

type OpenGraph {
    title: String
    description: String
    favIcon: String
    image: String
    alternateImage: String
    url: String
    siteName: String
    type: String
    locale: String
    x: OpenGraphX
}

type OpenGraphX {
    card: String
    site: String
    title: String
    description: String
    image: String
    url: String
    type: String
    creator: String
}

input OpenGraphInput {
    title: String!
    description: String!
    favIcon: String!
    image: String!
    alternateImage: String!
    url: String!
    siteName: String!
    type: String!
    locale: String!
    x: OpenGraphXInput!
}

input OpenGraphXInput {
    card: String!
    site: String!
    title: String!
    description: String!
    image: String!
    url: String!
    type: String!
    creator: String!
}

input pinnedLinkInput @platformPermission(permission: PLATFORM_UPDATE) {
    linkId: UUID!
}

extend type Query {
    "Returns the link connection with sorting and filtering options."
    links(
        first: Int
        after: String
        last: Int
        before: String
        orderBy: Map
        where: LinkFilter
    ): LinkConnection!
}

extend type Mutation {
    "This mutation is used for creating a link for an platform after a link is created it automatically creates a crawl request. but if user wants to crawl agein it can be done with requestCrawl mutation."
    createLink(input: LinkCreateInput!): Link! @auth
    "This mutation is used for requesting a crawl for a link. Link crawling status can be checked in link query with crawls field."
    requestCrawl(input: CrawlRequestInput!): LinkCrawl! @auth

    addToPinnedLinks(input: pinnedLinkInput!): Link! @auth
    removeFromPinnedLinks(input: pinnedLinkInput!): Link! @auth
}
