type User {
  id: UUID!
  avatar: String!
  email: String!
  fullname: String!
  verified: Boolean!
  phone: AccountPhone!
  organizations: [Organization!]!
  platforms: [Platform!]!
  invites: [UserInvite!]!

  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserInvite {
  id: UUID!
  email: String!
  code: String!
  organization: [Organization]!
  platforms: [Platform!]!
  user: User
  status: InvitationStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountPhone {
  number: String!
  countryCode: String!
  verified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Permission {
  id: UUID!
  name: String!
  description: String!
  organizations: [Organization!]!
  domains: [Domain!]!
  platforms: [Platform!]!
}

input UserInviteInput {
  email: String!
  organizationsPermissions: [OrganizationsWithPermissionsInput!]!
  platformsWithPermissions: [PlatformsWithPermissionsInput!]!
}

input PlatformsWithPermissionsInput {
  platformId: UUID!
  permissions: [PlatformPermission!]!
}

input AccountPhoneInput {
  number: String!
  countryCode: String!
}

input UpdateUserInviteInput {
  code: String!
  status: InvitationStatus!
  user: UserCreateInput!
}

input UserCreateInput {
  email: String!
  password: String!
  confirmPassword: String!
  fullname: String!
  phone: AccountPhoneInput!
  clientInformation: ClientInformationInput!
  organization: OrganizationCreateInput
}

input ClientInformationInput {
  useragent: String!
  ip: String!
}

extend type Query {
  "Retruns the authorized user."
  me: User! @auth
  "Returns all the users debug only this method should not be in the production without any super admin directive."
  users: [User!]!
  "Returns all the invited users by the authorized person. Invitation could be any organization with in inviter permissions."
  invites: [UserInvite!]! @auth
}

extend type Mutation {
  """
  This mutation is used to create a new user.
  If the organization is provided, new organization will be created for the user.
  """
  createUser(input: UserCreateInput!): User!
  """
  This mutation is used for inviting a user to an organization. 
  Authorized person can invite a user to multiple organizations with custom permissions.
  """
  inviteUser(input: UserInviteInput!): UserInvite! @auth

  "This mutattion used by invited person and invited person can accept or reject the invitation. If the user accepted, user field will be filled with user."
  updateUserInvitation(input: UpdateUserInviteInput!): InvitationStatus!
}
