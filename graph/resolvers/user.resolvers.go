package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/RouteHub-Link/routehub-service-graphql/auth"
	database_enums "github.com/RouteHub-Link/routehub-service-graphql/database/enums"
	database_models "github.com/RouteHub-Link/routehub-service-graphql/database/models"
	database_relations "github.com/RouteHub-Link/routehub-service-graphql/database/relations"
	"github.com/RouteHub-Link/routehub-service-graphql/graph"
	"github.com/RouteHub-Link/routehub-service-graphql/graph/model"
	graph_inputs "github.com/RouteHub-Link/routehub-service-graphql/graph/model/inputs"
	"github.com/vektah/gqlparser/gqlerror"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*database_models.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// InviteUser is the resolver for the inviteUser field.
func (r *mutationResolver) InviteUser(ctx context.Context, input graph_inputs.UserInviteInput) (*database_relations.UserInvite, error) {
	userSession := auth.ForContext(ctx)
	userService := r.ServiceContainer.UserService

	invite, err := userService.InviteUser(input, userSession.ID)

	return invite, err
}

// UpdateUserInvitation is the resolver for the updateUserInvitation field.
func (r *mutationResolver) UpdateUserInvitation(ctx context.Context, input model.UpdateUserInviteInput) (database_enums.InvitationStatus, error) {
	userService := r.ServiceContainer.UserService
	invitation, err := userService.UpdateInvitation(input)

	if err != nil {
		return "", err
	}

	return invitation.Status, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*database_models.User, error) {
	userSession := auth.ForContext(ctx)
	if userSession == nil {
		return nil, gqlerror.Errorf("Access Denied")
	}

	return r.LoaderContainer.User.Get(ctx, userSession.ID)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*database_models.User, error) {
	return r.ServiceContainer.UserService.Users()
}

// Organizations is the resolver for the Organizations field.
func (r *userResolver) Organizations(ctx context.Context, obj *database_models.User) ([]*database_models.Organization, error) {
	return r.ServiceContainer.UserService.OrganizationUser(obj.ID)
}

// Platforms is the resolver for the platforms field.
func (r *userResolver) Platforms(ctx context.Context, obj *database_models.User) ([]*database_models.Platform, error) {
	return r.ServiceContainer.PlatformService.GetPlatformsByUser(obj.ID)
}

// Permissions is the resolver for the permissions field.
func (r *userResolver) Permissions(ctx context.Context, obj *database_models.User) ([]*model.Permission, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// Payments is the resolver for the payments field.
func (r *userResolver) Payments(ctx context.Context, obj *database_models.User) ([]*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payments - payments"))
}

// UserInvites is the resolver for the userInvites field.
func (r *userResolver) UserInvites(ctx context.Context, obj *database_models.User) ([]*database_relations.UserInvite, error) {
	panic(fmt.Errorf("not implemented: UserInvites - userInvites"))
}

// Organization is the resolver for the organization field.
func (r *userInviteResolver) Organization(ctx context.Context, obj *database_relations.UserInvite) (*database_models.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}

// Platforms is the resolver for the platforms field.
func (r *userInviteResolver) Platforms(ctx context.Context, obj *database_relations.UserInvite) ([]*database_models.Platform, error) {
	panic(fmt.Errorf("not implemented: Platforms - platforms"))
}

// User is the resolver for the user field.
func (r *userInviteResolver) User(ctx context.Context, obj *database_relations.UserInvite) (*database_models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

// UserInvite returns graph.UserInviteResolver implementation.
func (r *Resolver) UserInvite() graph.UserInviteResolver { return &userInviteResolver{r} }

type userResolver struct{ *Resolver }
type userInviteResolver struct{ *Resolver }
