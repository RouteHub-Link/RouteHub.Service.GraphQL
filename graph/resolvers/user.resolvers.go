package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/RouteHub-Link/routehub-service-graphql/auth"
	database_enums "github.com/RouteHub-Link/routehub-service-graphql/database/enums"
	database_models "github.com/RouteHub-Link/routehub-service-graphql/database/models"
	database_relations "github.com/RouteHub-Link/routehub-service-graphql/database/relations"
	database_types "github.com/RouteHub-Link/routehub-service-graphql/database/types"
	"github.com/RouteHub-Link/routehub-service-graphql/graph"
	"github.com/RouteHub-Link/routehub-service-graphql/graph/model"
	graph_inputs "github.com/RouteHub-Link/routehub-service-graphql/graph/model/inputs"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/gqlerror"
)

// InviteUser is the resolver for the inviteUser field.
func (r *mutationResolver) InviteUser(ctx context.Context, input graph_inputs.UserInviteInput) (*database_relations.UserInvite, error) {
	userSession := auth.ForContext(ctx)
	userService := r.ServiceContainer.UserService

	invite, err := userService.InviteUser(input, userSession.ID)

	return invite, err
}

// UpdateUserInvitation is the resolver for the updateUserInvitation field.
func (r *mutationResolver) UpdateUserInvitation(ctx context.Context, input model.UpdateUserInviteInput) (database_enums.InvitationStatus, error) {
	userService := r.ServiceContainer.UserService
	invitation, err := userService.UpdateInvitation(input)

	if err != nil {
		return "", err
	}

	return invitation.Status, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*database_models.User, error) {
	userSession := auth.ForContext(ctx)
	if userSession == nil {
		return nil, gqlerror.Errorf("Access Denied")
	}

	return r.LoaderContainer.User.Get(ctx, userSession.ID)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*database_models.User, error) {
	return r.ServiceContainer.UserService.Users()
}

// Invites is the resolver for the invites field.
func (r *queryResolver) Invites(ctx context.Context) ([]*database_relations.UserInvite, error) {
	userSession := auth.ForContext(ctx)
	return r.ServiceContainer.UserService.GetInvitesByInvitedById(userSession.ID)
}

// Avatar is the resolver for the avatar field.
func (r *userResolver) Avatar(ctx context.Context, obj *database_models.User) (string, error) {
	userSession := auth.ForContext(ctx)
	return userSession.UserInfo.Picture, nil
}

// Email is the resolver for the email field.
func (r *userResolver) Email(ctx context.Context, obj *database_models.User) (string, error) {
	userSession := auth.ForContext(ctx)
	return userSession.UserInfo.Email, nil
}

// Fullname is the resolver for the fullname field.
func (r *userResolver) Fullname(ctx context.Context, obj *database_models.User) (string, error) {
	userSession := auth.ForContext(ctx)
	return userSession.UserInfo.Name, nil
}

// Verified is the resolver for the verified field.
func (r *userResolver) Verified(ctx context.Context, obj *database_models.User) (bool, error) {
	userSession := auth.ForContext(ctx)
	return bool(userSession.UserInfo.EmailVerified), nil
}

// Phone is the resolver for the phone field.
func (r *userResolver) Phone(ctx context.Context, obj *database_models.User) (*database_types.AccountPhone, error) {
	userSession := auth.ForContext(ctx)
	phone := &database_types.AccountPhone{
		Number:   userSession.UserInfo.PhoneNumber,
		Verified: userSession.UserInfo.PhoneNumberVerified,
	}

	return phone, nil
}

// Organizations is the resolver for the Organizations field.
func (r *userResolver) Organizations(ctx context.Context, obj *database_models.User) ([]*database_models.Organization, error) {
	return r.ServiceContainer.UserService.OrganizationUser(obj.ID)
}

// Platforms is the resolver for the platforms field.
func (r *userResolver) Platforms(ctx context.Context, obj *database_models.User) ([]*database_models.Platform, error) {
	return r.ServiceContainer.PlatformService.GetPlatformsByUser(obj.ID)
}

// Invites is the resolver for the invites field.
func (r *userResolver) Invites(ctx context.Context, obj *database_models.User) ([]*database_relations.UserInvite, error) {
	return r.ServiceContainer.UserService.GetInvitesByInvitedById(obj.ID)
}

// Organization is the resolver for the organization field.
func (r *userInviteResolver) Organization(ctx context.Context, obj *database_relations.UserInvite) ([]*database_models.Organization, error) {
	organizationIds := make([]uuid.UUID, len(obj.OrganizationPermissions))
	for _, organization := range obj.OrganizationPermissions {
		organizationIds = append(organizationIds, organization.OrganizationID)
	}

	return r.ServiceContainer.OrganizationService.GetOrganizationsByIds(organizationIds)
}

// Platforms is the resolver for the platforms field.
func (r *userInviteResolver) Platforms(ctx context.Context, obj *database_relations.UserInvite) ([]*database_models.Platform, error) {
	// Could be implemented with dataloader
	platformIds := make([]uuid.UUID, len(obj.PlatformsWithPermissions))
	for i, platform := range obj.PlatformsWithPermissions {
		platformIds[i] = platform.PlatformID
	}

	return r.ServiceContainer.PlatformService.GetPlatforms(platformIds)
}

// User is the resolver for the user field.
func (r *userInviteResolver) User(ctx context.Context, obj *database_relations.UserInvite) (*database_models.User, error) {
	userId, err := r.ServiceContainer.UserService.GetInvitedUserByInvitation(*obj)
	if err != nil || userId == nil {
		return nil, gqlerror.Errorf("User cannot be accessed %v", err)
	}

	return r.LoaderContainer.User.Get(ctx, *userId)
}

// Permissions is the resolver for the permissions field.
func (r *platformsWithPermissionsInputResolver) Permissions(ctx context.Context, obj *database_relations.PlatformsWithPermissions, data []database_enums.PlatformPermission) error {
	// ? these are actually inputs inside inputs so we should not be doing anything here unless we want to make them a main input

	return nil
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

// UserInvite returns graph.UserInviteResolver implementation.
func (r *Resolver) UserInvite() graph.UserInviteResolver { return &userInviteResolver{r} }

// PlatformsWithPermissionsInput returns graph.PlatformsWithPermissionsInputResolver implementation.
func (r *Resolver) PlatformsWithPermissionsInput() graph.PlatformsWithPermissionsInputResolver {
	return &platformsWithPermissionsInputResolver{r}
}

type userResolver struct{ *Resolver }
type userInviteResolver struct{ *Resolver }
type platformsWithPermissionsInputResolver struct{ *Resolver }
