package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	database_enums "github.com/RouteHub-Link/routehub-service-graphql/database/enums"
	database_models "github.com/RouteHub-Link/routehub-service-graphql/database/models"
	database_relations "github.com/RouteHub-Link/routehub-service-graphql/database/relations"
	database_types "github.com/RouteHub-Link/routehub-service-graphql/database/types"
	"github.com/RouteHub-Link/routehub-service-graphql/graph"
	"github.com/RouteHub-Link/routehub-service-graphql/graph/model"
)

// Organizations is the resolver for the Organizations field.
func (r *industryResolver) Organizations(ctx context.Context, obj *database_types.Industry) ([]*database_models.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - Organizations"))
}

// Permissions is the resolver for the permissions field.
func (r *organizationResolver) Permissions(ctx context.Context, obj *database_models.Organization) ([]database_enums.OrganizationPermission, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// Platforms is the resolver for the platforms field.
func (r *organizationResolver) Platforms(ctx context.Context, obj *database_models.Organization) ([]*database_models.Platform, error) {
	return r.ServiceContainer.PlatformService.GetPlatformsByOrganization(obj.ID)
}

// Users is the resolver for the users field.
func (r *organizationResolver) Users(ctx context.Context, obj *database_models.Organization) ([]*database_models.User, error) {
	return r.ServiceContainer.UserService.UsersByOrganization(obj.ID)
}

// Domains is the resolver for the domains field.
func (r *organizationResolver) Domains(ctx context.Context, obj *database_models.Organization) ([]*database_models.Domain, error) {
	domainService := r.ServiceContainer.DomainService
	return domainService.GetDomainsByOrganization(obj.ID)
}

// PaymentPlan is the resolver for the paymentPlan field.
func (r *organizationResolver) PaymentPlan(ctx context.Context, obj *database_models.Organization) (model.PaymentPlan, error) {
	panic(fmt.Errorf("not implemented: PaymentPlan - paymentPlan"))
}

// Payments is the resolver for the payments field.
func (r *organizationResolver) Payments(ctx context.Context, obj *database_models.Organization) ([]*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payments - payments"))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*database_models.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - organizations"))
}

// Permissions is the resolver for the permissions field.
func (r *organizationsWithPermissionsInputResolver) Permissions(ctx context.Context, obj *database_relations.OrganizationsWithPermissions, data []database_enums.OrganizationPermission) error {
	// TODO check the organizations i guess user has permisison or just remove this
	return nil
}

// Industry returns graph.IndustryResolver implementation.
func (r *Resolver) Industry() graph.IndustryResolver { return &industryResolver{r} }

// Organization returns graph.OrganizationResolver implementation.
func (r *Resolver) Organization() graph.OrganizationResolver { return &organizationResolver{r} }

// OrganizationsWithPermissionsInput returns graph.OrganizationsWithPermissionsInputResolver implementation.
func (r *Resolver) OrganizationsWithPermissionsInput() graph.OrganizationsWithPermissionsInputResolver {
	return &organizationsWithPermissionsInputResolver{r}
}

type industryResolver struct{ *Resolver }
type organizationResolver struct{ *Resolver }
type organizationsWithPermissionsInputResolver struct{ *Resolver }
