package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/RouteHub-Link/routehub-service-graphql/auth"
	database_enums "github.com/RouteHub-Link/routehub-service-graphql/database/enums"
	database_models "github.com/RouteHub-Link/routehub-service-graphql/database/models"
	database_relations "github.com/RouteHub-Link/routehub-service-graphql/database/relations"
	"github.com/RouteHub-Link/routehub-service-graphql/graph"
	"github.com/RouteHub-Link/routehub-service-graphql/graph/model"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input model.OrganizationCreateInput) (*database_models.Organization, error) {
	userSession := auth.ForContext(ctx)

	return r.ServiceContainer.OrganizationService.CreateOrganization(userSession.ID, &input)
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, input model.OrganizationUpdateInput) (*database_models.Organization, error) {
	return r.ServiceContainer.OrganizationService.UpdateOrganization(input)
}

// Permissions is the resolver for the permissions field.
func (r *organizationResolver) Permissions(ctx context.Context, obj *database_models.Organization) ([]database_enums.OrganizationPermission, error) {
	userSession := auth.ForContext(ctx)

	return r.ServiceContainer.OrganizationPermissionService.GetOrganizationPermissions(userSession.ID, obj.ID)
}

// Platforms is the resolver for the platforms field.
func (r *organizationResolver) Platforms(ctx context.Context, obj *database_models.Organization) ([]*database_models.Platform, error) {
	return r.ServiceContainer.PlatformService.GetPlatformsByOrganization(obj.ID)
}

// Users is the resolver for the users field.
func (r *organizationResolver) Users(ctx context.Context, obj *database_models.Organization) ([]*database_models.User, error) {
	UserIdsByOrganization, err := r.ServiceContainer.UserService.UserIdsByOrganization(obj.ID)
	if err != nil {
		return nil, err
	}

	return r.LoaderContainer.User.GetBatch(ctx, UserIdsByOrganization)
}

// Domains is the resolver for the domains field.
func (r *organizationResolver) Domains(ctx context.Context, obj *database_models.Organization) ([]*database_models.Domain, error) {
	domainService := r.ServiceContainer.DomainService
	return domainService.GetDomainsByOrganization(obj.ID)
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*database_models.Organization, error) {
	return r.ServiceContainer.OrganizationService.GetOrganizations()
}

// Permissions is the resolver for the permissions field.
func (r *organizationsWithPermissionsInputResolver) Permissions(ctx context.Context, obj *database_relations.OrganizationsWithPermissions, data []database_enums.OrganizationPermission) error {
	// ? these are actually inputs inside inputs so we should not be doing anything here unless we want to make them a main input
	return nil
}

// Organization returns graph.OrganizationResolver implementation.
func (r *Resolver) Organization() graph.OrganizationResolver { return &organizationResolver{r} }

// OrganizationsWithPermissionsInput returns graph.OrganizationsWithPermissionsInputResolver implementation.
func (r *Resolver) OrganizationsWithPermissionsInput() graph.OrganizationsWithPermissionsInputResolver {
	return &organizationsWithPermissionsInputResolver{r}
}

type organizationResolver struct{ *Resolver }
type organizationsWithPermissionsInputResolver struct{ *Resolver }
